// This file was generated by Prisma (https://www.prisma.io/).


generator client {
  provider = "prisma-client-js"
  //output to node_modules
  // output   = "../node_modules/.prisma/client"
  output = "@prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model User{
  id                String   @id @default(cuid())
  name              String?
  email             String  @unique
  emailVerified     DateTime? // Added for verification tracking
  password          String?
  role              UserRole  @default(CUSTOMER) // Added for roles
  image             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  //relations required by prisma nextauth.js
  accounts Account[]
  sessions Session[]
  subscriptions Subscription[] // Added for subscriptions
}


// Models required by NextAuth.js Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Subscription {
  id String @id @default(cuid())
  name String
  cost Decimal
  currency String // e.g. INR, USD
  billingCycle String // e.g. monthly, yearly
  //last billing date
  lastBillingDate DateTime
  //next billing date
  nextBillingDate DateTime?
  //status of the subscription
  status String // e.g. active, inactive, cancelled
  category String // e.g. entertainment, education, work
  folder String // e.g. for personal use, for work
  notes String? // e.g. for personal use, for work
  logo String? // e.g. logo URL

  //link to user
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
//export 